//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace POCO_Demo {
    using System;
    using System.ComponentModel;
    using System.Collections.Generic;
    using System.Data.SqlClient;
    using System.Xml.Serialization;
    
    
    /// <summary>
    /// 
    /// </summary>
    [Serializable()]
    public partial class AssignmentInfo {
        
        private AssignmentInfoData _data;
        
        private static object _lock = new object();
        
        private static XmlSerializer _serializer;
        
        #region  Constructors 
        /// <summary>
        /// 
        /// </summary>
        public AssignmentInfo() {
        }
        
        internal AssignmentInfo(AssignmentInfoData data) {
                this.Data = data;
        }
        #endregion
        
        #region  Public Properties 
        /// <summary>
        /// 
        /// </summary>
        [XmlIgnore()]
        public int Assignment_id {
            get {
                return this.Data.Assignment_id;
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        [XmlIgnore()]
        public string AssignmentTypeCode {
            get {
                return this.Data.AssignmentTypeCode;
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        [XmlIgnore()]
        public System.Nullable<int> Course_id {
            get {
                return this.Data.Course_id;
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        [XmlIgnore()]
        public System.Nullable<int> ParentAssignment_id {
            get {
                return this.Data.ParentAssignment_id;
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        [XmlIgnore()]
        public System.Nullable<byte> Number {
            get {
                return this.Data.Number;
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        [XmlIgnore()]
        public string Title {
            get {
                return this.Data.Title;
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        [XmlIgnore()]
        public string Description {
            get {
                return this.Data.Description;
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        [XmlIgnore()]
        public System.Nullable<short> EstimatedMins {
            get {
                return this.Data.EstimatedMins;
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        [XmlIgnore()]
        public bool IsDeleted {
            get {
                return this.Data.IsDeleted;
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        [XmlIgnore()]
        public System.DateTime InsertDate {
            get {
                return this.Data.InsertDate;
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        [XmlIgnore()]
        public System.DateTime UpdateDate {
            get {
                return this.Data.UpdateDate;
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        [XmlIgnore()]
        public bool IsLevelTest {
            get {
                return this.Data.IsLevelTest;
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        [XmlIgnore()]
        public string LevelCode {
            get {
                return this.Data.LevelCode;
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        [XmlIgnore()]
        public System.Nullable<int> Source_id {
            get {
                return this.Data.Source_id;
            }
        }
        #endregion
        
        #region  Non-Public Properties 
        private AssignmentInfoData Data {
            get {
                if (_data == null)
                {
                    _data = new AssignmentInfoData();
                }
                return _data;
            }
            set {
                _data = value;
            }
        }
        #endregion
        
        #region  Serialization 
        /// <summary>
        /// 
        /// </summary>
        [Browsable(false)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public AssignmentInfoData SerializationData {
            get {
                return this.Data;
            }
            set {
                if (_data != null)
                {
                    throw new InvalidOperationException("Attempted to overwrite initialized simple object core data.");
                }
                this.Data = value;
            }
        }
        
        /// <summary>
        /// 
        /// </summary>
        public string Serialize() {
            XmlSerializer serializer;

            using (System.IO.StringWriter writer = new System.IO.StringWriter())
            {
                serializer = AssignmentInfo.GetSerializer();
                serializer.Serialize(writer, this);

                return writer.ToString();
            }

        }
        
        /// <summary>
        /// 
        /// </summary>
        public static AssignmentInfo Deserialize(string data) {

            XmlSerializer serializer;
            AssignmentInfo obj;
            System.IO.StringReader sr = new System.IO.StringReader(data);

            serializer = AssignmentInfo.GetSerializer();
            obj = (AssignmentInfo)serializer.Deserialize(sr);

            return obj;
        }
        
        private static XmlSerializer GetSerializer() {

            if (_serializer == null)
            {
                lock (_lock)
                {
                    if (_serializer == null)
                    {
                        _serializer = new XmlSerializer(typeof(AssignmentInfo));
                    }
                }
            }
            return _serializer;
        }
        #endregion
        
        #region  Data Class 
        /// <summary>
        /// 
        /// </summary>
        [Serializable()]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public partial class AssignmentInfoData {
            
            /// <summary>
            /// 
            /// </summary>
            public int Assignment_id;
            
            /// <summary>
            /// 
            /// </summary>
            public string AssignmentTypeCode;
            
            /// <summary>
            /// 
            /// </summary>
            public System.Nullable<int> Course_id;
            
            /// <summary>
            /// 
            /// </summary>
            public System.Nullable<int> ParentAssignment_id;
            
            /// <summary>
            /// 
            /// </summary>
            public System.Nullable<byte> Number;
            
            /// <summary>
            /// 
            /// </summary>
            public string Title;
            
            /// <summary>
            /// 
            /// </summary>
            public string Description;
            
            /// <summary>
            /// 
            /// </summary>
            public System.Nullable<short> EstimatedMins;
            
            /// <summary>
            /// 
            /// </summary>
            public bool IsDeleted;
            
            /// <summary>
            /// 
            /// </summary>
            public System.DateTime InsertDate;
            
            /// <summary>
            /// 
            /// </summary>
            public System.DateTime UpdateDate;
            
            /// <summary>
            /// 
            /// </summary>
            public bool IsLevelTest;
            
            /// <summary>
            /// 
            /// </summary>
            public string LevelCode;
            
            /// <summary>
            /// 
            /// </summary>
            public System.Nullable<int> Source_id;
        }
        #endregion
    }
    
    /// <summary>
    /// 
    /// </summary>
    public partial class AssignmentInfoAssembler {
        
        private AssignmentInfoAssembler() {
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="dr"></param>
        public static List<AssignmentInfo> CreateList(SqlDataReader dr) {

            AssignmentInfo.AssignmentInfoData data;
            AssignmentInfo so;
            List<AssignmentInfo> list = new List<AssignmentInfo>();

            // Get ordinals
            int assignment_idOrd = dr.GetOrdinal("Assignment_id");
            int assignmentTypeCodeOrd = dr.GetOrdinal("AssignmentTypeCode");
            int course_idOrd = dr.GetOrdinal("Course_id");
            int parentAssignment_idOrd = dr.GetOrdinal("ParentAssignment_id");
            int numberOrd = dr.GetOrdinal("Number");
            int titleOrd = dr.GetOrdinal("Title");
            int descriptionOrd = dr.GetOrdinal("Description");
            int estimatedMinsOrd = dr.GetOrdinal("EstimatedMins");
            int isDeletedOrd = dr.GetOrdinal("IsDeleted");
            int insertDateOrd = dr.GetOrdinal("InsertDate");
            int updateDateOrd = dr.GetOrdinal("UpdateDate");
            int isLevelTestOrd = dr.GetOrdinal("IsLevelTest");
            int levelCodeOrd = dr.GetOrdinal("LevelCode");
            int source_idOrd = dr.GetOrdinal("Source_id");

            // Read objects and add to list
            while (dr.Read())
            {
                data = new AssignmentInfo.AssignmentInfoData();

                data.Assignment_id = GetValue<int>(dr, assignment_idOrd, 0);
                data.AssignmentTypeCode = GetValue<string>(dr, assignmentTypeCodeOrd, "");
                data.Course_id = GetValue<Nullable<int>>(dr, course_idOrd, null);
                data.ParentAssignment_id = GetValue<Nullable<int>>(dr, parentAssignment_idOrd, null);
                data.Number = GetValue<Nullable<byte>>(dr, numberOrd, null);
                data.Title = GetValue<string>(dr, titleOrd, "");
                data.Description = GetValue<string>(dr, descriptionOrd, null);
                data.EstimatedMins = GetValue<Nullable<short>>(dr, estimatedMinsOrd, null);
                data.IsDeleted = GetValue<bool>(dr, isDeletedOrd, false);
                data.InsertDate = GetValue<DateTime>(dr, insertDateOrd, new DateTime(1800, 1, 1));
                data.UpdateDate = GetValue<DateTime>(dr, updateDateOrd, new DateTime(1800, 1, 1));
                data.IsLevelTest = GetValue<bool>(dr, isLevelTestOrd, false);
                data.LevelCode = GetValue<string>(dr, levelCodeOrd, null);
                data.Source_id = GetValue<Nullable<int>>(dr, source_idOrd, null);
            
                so = new AssignmentInfo(data);
                list.Add(so);
            }

            return list;
        }
        
        private static Dictionary<string, int> CreateFieldsLookup(SqlDataReader dr) {

            var fields = new Dictionary<string, int>();

            for (int i = 0; i < dr.FieldCount; i++)
            {
                fields[dr.GetName(i).ToLowerInvariant()] = i;
            }

            return fields;
        }
        
        private static int GetOptionalOrdinal(Dictionary<string, int> fields, string name) {

            int ordinal;

            if (!fields.TryGetValue(name.ToLowerInvariant(), out ordinal))
            {
                ordinal = -1;
            }

            return ordinal;
        }
        
        private static TValue GetValue<TValue>(SqlDataReader dr, int ordinal, TValue dbNullValue)
         {
            TValue value;

            if (ordinal < 0 || dr.IsDBNull(ordinal))
            {
                return dbNullValue;
            }
            else
            {
                value = (TValue)dr.GetValue(ordinal);

                if (value.GetType() == typeof(string)) {
                    value = (TValue)RTrimString(value);
                }

                return value;
            }

        }
        
        private static object RTrimString(object value) {
            if (value != null)
            {
                return ((string)value).TrimEnd(' ');
            }
            else
            {
                return null;
            }
        }
    }
}
